#!/bin/bash

set -o errexit
set -o pipefail

function env {
  echo ">> Copying environment file..."
  if [ -f .env ]; then
      echo ".env already exists, overwriting..."
  else
      echo "Creating .env file from .env.example"
  fi
  cp -f .env.example .env
  chmod 664 .env
  chown 1000:1000 .env
}

function setup {
  remove_all || echo "[warn] Could not complete cleanup (remove_all); continuing..."

  env || echo "[warn] Failed to copy .env (env); continuing..."

  up || echo "[warn] Failed to start containers (up); continuing..."

  composer || echo "[warn] Composer install failed (composer); continuing..."

  generate_key || echo "[warn] Key generation failed (generate_key); continuing..."

  migrate || echo "[warn] Migrations failed (migrate); continuing..."
}

function ps {
  docker compose ps
}

function up {
  source .env
  echo ">> Starting containers..."
  docker compose up "${@}" -d
}

function down {
  source .env
  docker compose down "${@}"
}

function generate_key {
  source .env
  echo ">> Generating application key..."
  php artisan key:generate
}

function migrate {
  source .env
  echo ">> Running database migrations..."
  docker compose exec app php artisan migrate
}

function composer {
  source .env
  echo ">> Installing Composer dependencies..."
  docker compose exec app composer install --no-interaction --optimize-autoloader
}

function remove_all {
  echo ">> Cleaning up .env, vendor, containers, images, and volumes..."
  rm -rf vendor || echo "vendor directory not found, skipping removal"
  rm -f .env || echo ".env not found, skipping removal"
  
  docker ps -a --filter "name=marketcore-api-" -q | xargs -r docker rm -f

  docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep "marketcore-api" | awk '{print $2}' | xargs -r docker rmi -f

  docker volume ls --format "{{.Name}}" | grep "marketcore-api" | xargs -r docker volume rm -f
}

TIMEFORMAT=$'\nTask completed in %3lR'
time ${@}

